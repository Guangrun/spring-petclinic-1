<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<artifactId>spring-petclinic-api</artifactId>

	<name>spring-petclinic-api</name>
	<packaging>war</packaging>

	<parent>
		<groupId>org.springframework.samples</groupId>
		<artifactId>spring-petclinic</artifactId>
		<version>1.0.0-SNAPSHOT</version>
	</parent>

	<properties>
		<sonar.sources>src/main/java,target/domain-sources</sonar.sources>
		<sonar.java.binaries>target/classes,target/domain-classes</sonar.java.binaries>
	</properties>

	<dependencies>

		<dependency>
			<groupId>org.springframework.samples</groupId>
			<artifactId>spring-petclinic-domain</artifactId>
			<version>1.0.0-SNAPSHOT</version>
		</dependency>
		
		
		<dependency>
			<groupId>org.springframework.samples</groupId>
			<artifactId>spring-petclinic-common</artifactId>
			<version>1.0.0-SNAPSHOT</version>
		</dependency>	

		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.3.2</version>
		</dependency>

		<dependency>
			<groupId>org.apache.tomcat</groupId>
			<artifactId>tomcat-servlet-api</artifactId>
			<version>${tomcat.servlet.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>jsp-api</artifactId>
			<version>2.1</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.glassfish.web</groupId>
			<artifactId>jstl-impl</artifactId>
			<version>1.2</version>
			<exclusions>
				<exclusion>
					<groupId>javax.servlet</groupId>
					<artifactId>servlet-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>com.sun.xml.bind</groupId>
			<artifactId>jaxb-impl</artifactId>
			<version>${jaxb-impl.version}</version>
			<scope>provided</scope>
		</dependency>
		<!-- SPRING, SPRING, SPRINGITY SPRING -->
		<dependency>
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-jpa</artifactId>
			<version>${spring-data-jpa.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${spring-framework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aop</artifactId>
			<version>${spring-framework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${spring-framework.version}</version>
		</dependency>
		<!-- used for EhCacheCacheManager -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
			<version>${spring-framework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-oxm</artifactId>
			<version>${spring-framework.version}</version>
			<exclusions>
				<exclusion>
					<groupId>commons-lang</groupId>
					<artifactId>commons-lang</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jms</artifactId>
			<version>${spring-framework.version}</version>
		</dependency>




		<!-- Logging with SLF4J & LogBack -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j.version}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${logback.version}</version>
			<scope>runtime</scope>
		</dependency>

		<!-- Webjars (static dependencies distributed as JAR files) -->
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>bootstrap</artifactId>
			<version>${webjars-bootstrap.version}</version>
		</dependency>
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>jquery-ui</artifactId>
			<version>${webjars-jquery-ui.version}</version>
		</dependency>
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>jquery</artifactId>
			<version>${webjars-jquery.version}</version>
		</dependency>
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>angular-ui-bootstrap</artifactId>
			<version>${webjars-angular-ui-bootstrap}</version>
		</dependency>

		<!-- used by Spring MVC Test framework -->
		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest-library</artifactId>
			<version>${hamcrest.version}</version>
			<scope>test</scope>
		</dependency>

		<!-- Dandelion -->
		<dependency>
			<groupId>com.github.dandelion</groupId>
			<artifactId>datatables-jsp</artifactId>
			<version>${dandelion.version}</version>
		</dependency>
		<dependency>
			<groupId>com.github.dandelion</groupId>
			<artifactId>datatables-export-itext</artifactId>
			<version>${dandelion.version}</version>
		</dependency>


	</dependencies>
	<dependencyManagement>
		<dependencies>
			<!-- Force the version of all the spring jars (core, beans, context, ...) 
				pulled by spring-data-jpa:1.3.4.RELEASE to 3.2.x when spring-data pulls the 
				3.1.x versions to prevent some misbehaviors of maven which sometimes pulls 
				both 3.2.x and 3.1.x versions of spring-core, spring-beans and spring-context -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-core</artifactId>
				<version>${spring-framework.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-beans</artifactId>
				<version>${spring-framework.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-context</artifactId>
				<version>${spring-framework.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-orm</artifactId>
				<version>${spring-framework.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-aop</artifactId>
				<version>${spring-framework.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-tx</artifactId>
				<version>${spring-framework.version}</version>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<!-- Maven plugin versions are mentioned in order to guarantee the build 
		reproducibility in the long term -->
	<build>
		<finalName>petclinic-api</finalName>
		<defaultGoal>install</defaultGoal>
		<testResources>
			<testResource>
				<!-- declared explicitly so Spring config files can be placed next to 
					their corresponding JUnit test class (see example with ValidatorTests) -->
				<directory>${project.basedir}/src/test/java</directory>
			</testResource>
			<testResource>
				<directory>${project.basedir}/src/test/resources</directory>
			</testResource>
		</testResources>
		<plugins>
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<version>3.0.1</version>
				<executions>
					<execution>
						<id>copy-domain-src-in-api</id>
						<phase>package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>target/domain-sources</outputDirectory>
							<resources>
								<resource>
									<directory>../spring-petclinic-domain/src/main/java</directory>
								</resource>
							</resources>
						</configuration>
					</execution>
					<execution>
						<id>copy-domain-classes-in-api</id>
						<phase>package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>target/domain-classes</outputDirectory>
							<resources>
								<resource>
									<directory>../spring-petclinic-domain/target/classes</directory>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>



	<profiles>


		<profile>
			<id>collect-it-data</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>1.2.1</version>
						<executions>
							<execution>
								<id>dump-java-it-results</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>java</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<mainClass>org.spring.petclinic.common.jacoco.coverage.JacocoDataCollectionTest</mainClass>
							<arguments>
								<argument>service:jmx:rmi:///jndi/rmi://localhost:9999/jmxrmi</argument>
								<argument>${project.basedir}/target/jacoco-it.exec</argument>
							</arguments>
						</configuration>
					</plugin>

				</plugins>

			</build>

		</profile>

		<!-- Cargo configuration to execute integration tests -->
		<!-- in an ad-hoc provisioned Tomcat container -->
		<profile>
			<id>cargo-tomcat</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.cargo</groupId>
						<artifactId>cargo-maven2-plugin</artifactId>
						<version>1.2.1</version>
						<configuration>
							<container>
								<containerId>tomcat7x</containerId>
								<zipUrlInstaller>
									<url>${tomcat.downloadUrl}</url>
								</zipUrlInstaller>
							</container>
							<configuration>

								<properties>
									<cargo.servlet.port>9966</cargo.servlet.port>
									<cargo.tomcat.ajp.port>9965</cargo.tomcat.ajp.port>
									<cargo.jvmargs>
										${jacoco.itAgentConfig}
										-Dcom.sun.management.jmxremote
										-Dcom.sun.management.jmxremote.port=9999
										-Dcom.sun.management.jmxremote.authenticate=false
										-Dcom.sun.management.jmxremote.ssl=false
									</cargo.jvmargs>
								</properties>
							</configuration>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

	</profiles>

	<url>demopetclinic</url>
</project>
